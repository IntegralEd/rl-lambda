AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless application for Recursive Learning's Lambda backend

Globals:
  Function:
    Timeout: 180
    MemorySize: 256
    Runtime: nodejs18.x
    Environment:
      Variables:
        NODE_ENV: production
    Tracing: Active
    Tags:
      Project: RecursiveLearning
      Environment: Production

Resources:
  # 1. API Gateway Configuration
  RecursiveLearningApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: RecursiveLearningApi
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - https://recursivelearning.app
        AllowMethods:
          - POST
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - X-Amz-Date
          - Authorization
          - X-Api-Key
          - X-Amz-Security-Token
        ExposeHeaders:
          - Access-Control-Allow-Origin
          - Access-Control-Allow-Methods
          - Access-Control-Allow-Headers
          - Access-Control-Max-Age
        MaxAge: 300

  RecursiveLearningApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref RecursiveLearningApi
      StageName: $default
      AutoDeploy: true

  # 2. Lambda Function
  rllambda2025Chat:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: index.handler
      Role: !GetAtt rllambda2025ChatRole.Arn
      Architectures:
        - arm64

  rllambda2025ChatRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/integraled/central/*

  # 3. Lambda Permission
  rllambda2025ChatAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt rllambda2025Chat.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RecursiveLearningApi}/*/*/chat

  # 4. POST Integration (AWS_PROXY)
  ChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RecursiveLearningApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt rllambda2025Chat.Arn
      PayloadFormatVersion: 2.0

  # 4.1. OPTIONS Integration (MOCK)
  ChatOptionsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RecursiveLearningApi
      IntegrationType: MOCK
      IntegrationMethod: OPTIONS
      IntegrationResponseSelectionExpression: 200
      ResponseParameters:
        - Access-Control-Allow-Origin: "'https://recursivelearning.app'"
        - Access-Control-Allow-Methods: "'OPTIONS,POST'"
        - Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"

  # 5. Routes
  ChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RecursiveLearningApi
      RouteKey: POST /chat
      Target: !Sub integrations/${ChatIntegration}

  ChatOptionsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RecursiveLearningApi
      RouteKey: OPTIONS /chat
      Target: !Sub integrations/${ChatOptionsIntegration}

Outputs:
  RecursiveLearningApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${RecursiveLearningApi}.execute-api.${AWS::Region}.amazonaws.com/
  RecursiveLearningApiId:
    Description: API Gateway ID
    Value: !Ref RecursiveLearningApi
  RecursiveLearningLambdaArn:
    Description: Lambda function ARN
    Value: !GetAtt rllambda2025Chat.Arn 
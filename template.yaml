AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Recursive Learning Lambda Backend with CORS-enabled API Gateway

Globals:
  Function:
    Timeout: 180
    MemorySize: 256
    Runtime: nodejs18.x
    Architectures:
      - arm64
    Environment:
      Variables:
        NODE_OPTIONS: --enable-source-maps
    LoggingConfig:
      LogFormat: JSON
      LogRetentionInDays: 30
      ApplicationLogLevel: INFO
      SystemLogLevel: INFO
    Tracing: Active
    Tags:
      Project: recursive-learning
      Environment: production
      Service: chat-backend

Resources:
  RecursiveLearningApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: RecursiveLearningApi
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - https://recursivelearning.app
          - https://app.recursivelearning.app
          - https://admin.recursivelearning.app
          - https://api.recursivelearning.app
        AllowMethods:
          - POST
          - OPTIONS
        AllowHeaders:
          - Content-Type
          - Authorization
        MaxAge: 300

  RecursiveLearningApiDefaultStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref RecursiveLearningApi
      StageName: $default

  rllambda2025Chat:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: rl-lambda-2025
      Description: Recursive Learning Chat Lambda
      CodeUri: .
      Handler: index.handler
      Policies:
        - SSMParameterReadPolicy:
            ParameterName: integraled/central/*
        - CloudWatchLogsFullAccess
        - Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource: !GetAtt rllambda2025Chat.Arn
              Principal: apigateway.amazonaws.com
              Condition:
                StringEquals:
                  aws:SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RecursiveLearningApi}/*/*/chat

  ChatIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RecursiveLearningApi
      Description: Chat endpoint integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt rllambda2025Chat.Arn
      PayloadFormatVersion: 2.0

  ChatOptionsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref RecursiveLearningApi
      Description: CORS preflight integration
      IntegrationType: MOCK
      PayloadFormatVersion: 2.0
      ResponseParameters:
        method.response.header.Access-Control-Allow-Headers: {"value": "Content-Type,Authorization"}
        method.response.header.Access-Control-Allow-Methods: {"value": "POST,OPTIONS"}
        method.response.header.Access-Control-Allow-Origin: {"value": "https://recursivelearning.app"}
        method.response.header.Access-Control-Max-Age: {"value": "300"}

  ChatRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RecursiveLearningApi
      RouteKey: POST /chat
      Target: !Join 
        - /
        - - integrations/
          - !Ref ChatIntegration

  ChatOptionsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref RecursiveLearningApi
      RouteKey: OPTIONS /chat
      Target: !Join 
        - /
        - - integrations/
          - !Ref ChatOptionsIntegration

  rllambda2025ChatAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref rllambda2025Chat
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RecursiveLearningApi}/*/*/chat

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub https://${RecursiveLearningApi}.execute-api.${AWS::Region}.amazonaws.com/
  LambdaArn:
    Description: Lambda function ARN
    Value: !GetAtt rllambda2025Chat.Arn 